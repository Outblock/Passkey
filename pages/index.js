import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { Button } from "@nextui-org/react";
import { FaCircleUser } from "react-icons/fa6";
import { FaRegIdBadge } from "react-icons/fa6";
import { getRandomBytes, base64DecodeURL } from "../utils";
import { decodeAuthenticatorData, decodeClientDataJSON } from "../modules/WebAuthnDecoder"
import { encodeArray } from "../modules/base64"

// import { initWasm, TW, KeyStore } from "@trustwallet/wallet-core";
// const core = await initWasm();

const bip39 = require('bip39')

const HDWallet = require('ethereum-hdwallet')

const get = async () => {
  console.log("wallet.get")

  // const data = base64DecodeURL("5R9uuqhjAmWP6kVb2w9TagcUoHA")
  
  // const wallet = HDWallet.fromSeed(data)

  // const mnemonic = bip39.entropyToMnemonic(data)

  // const { CoinType, HexCoding, HDWallet, AnyAddress } = core;

  // const wallet = HDWallet.createWithEntropy(data, "")
  // console.log("wallet.mnemonic =>", mnemonic)

  const result = await navigator.credentials.get({
    publicKey: {
      challenge: getRandomBytes(20),
      rpId: window.location.hostname,
    },
  });
  console.log("result ==>", result);

  const mnemonic1 = bip39.entropyToMnemonic(result.response.userHandle)

  console.log("User Handle ==>", encodeArray(result.response.userHandle))

  // const { CoinType, HexCoding, HDWallet, AnyAddress } = core;

  // const wallet = HDWallet.createWithEntropy(data, "")
  console.log("wallet.mnemonic =>", mnemonic1)
  const json = decodeClientDataJSON(result.response.clientDataJSON)
  console.log("clientDataJSON =>", json)
  const test = decodeAuthenticatorData(result.response.authenticatorData)
  console.log("wallet.test =>", test)



};

const create = async () => {

  const result = await navigator.credentials.create({
    publicKey: {
      challenge: getRandomBytes(20),
      rp: {
        name: window.location.hostname
      },
      user: {
        id: getRandomBytes(16),
        name: "Test web",
        displayName: "Test displayName"
      },
      pubKeyCredParams: [
        {
          "type": "public-key",
          "alg": -7
        },
        {
          "type": "public-key",
          "alg": -257
        }
      ]
    },
  });
  console.log("result ==>", result);
};

export default function Home() {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className="text-3xl font-bold">Passkey Demo</h1>
        <Button
          color="primary"
          variant="solid"
          startContent={<FaCircleUser />}
          onPress={create}
        >
          Register
        </Button>
        <Button
          color="danger"
          variant="solid"
          startContent={<FaRegIdBadge />}
          onPress={get}
        >
          Sign In
        </Button>
      </main>
    </div>
  );
}
